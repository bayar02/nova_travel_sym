{% extends 'admin/base_admin.html.twig' %}

{% block admin_title %}Admin User Management{% endblock %}

{% block admin_stylesheets %}
    {{ parent() }}
    <style>
        .admin-user-table {
            width: 100%;
            border-collapse: separate; /* Use separate for rounded corners on cells */
            border-spacing: 0; /* Remove default spacing */
            margin-top: 20px;
            background-color: #2a2a3d;
            color: #e0e0e6;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.25);
        }
        .admin-user-table th, .admin-user-table td {
            padding: 15px 20px; /* Increased padding */
            text-align: left;
            border-bottom: 1px solid #36364a;
            vertical-align: middle; /* Align content vertically */
        }
        .admin-user-table th {
            background-color: #1e1e2d;
            font-weight: 600;
            color: #7a7dfa; /* Accent color for headers */
        }
        .admin-user-table tr:last-child td {
             border-bottom: none;
        }
        .admin-user-table tbody tr:hover {
            background-color: #36364a;
        }
        /* Actions column styling */
        .admin-user-table .actions {
            white-space: nowrap; /* Prevent wrapping */
        }
        .admin-user-table .actions a, 
        .admin-user-table .actions .btn-delete,
        .admin-user-table .btn-save-role {
            color: #e0e0e6; /* Light text */
            text-decoration: none;
            margin-right: 8px;
            padding: 6px 12px; /* Slightly larger buttons */
            border-radius: 5px;
            transition: all 0.2s ease;
            background-color: #42434a; /* Grey background */
            border: none;
            cursor: pointer;
            font-size: 0.9em;
            font-family: inherit;
            display: inline-block;
        }
        .admin-user-table .actions a:hover, 
        .admin-user-table .actions .btn-delete:hover,
        .admin-user-table .btn-save-role:hover {
            background-color: #5e63ff; /* Accent hover */
            color: #fff;
            box-shadow: 0 2px 5px rgba(94, 99, 255, 0.3);
        }
        .admin-user-table .actions .btn-delete {
             background-color: #ff4d4d; /* Red delete */
             color: #fff;
        }
         .admin-user-table .actions .btn-delete:hover {
              background-color: #e60000; /* Darker red */
         }
         .admin-user-table .actions form {
             display: inline; 
         }
         /* Role Select Box */
         .role-select {
             padding: 6px 10px;
             background-color: #1e1e2d;
             color: #e0e0e6;
             border: 1px solid #36364a;
             border-radius: 5px;
             font-family: inherit;
             margin-right: 5px;
             min-width: 100px; /* Give it some width */
         }
         .btn-save-role {
             background-color: #28a745; /* Green save */
             color: #fff;
             padding: 6px 10px; /* Match select box height */
             font-size: 0.85em;
         }
          .btn-save-role:hover {
             background-color: #218838; /* Darker green */
          }

        /* Create button */
        .btn-create-user {
             display: inline-block;
             padding: 12px 25px;
             background: linear-gradient(45deg, #7a7dfa, #5e63ff);
             color: #fff;
             border-radius: 5px;
             text-decoration: none;
             font-weight: 600;
             margin-bottom: 25px;
             transition: all 0.3s ease;
             box-shadow: 0 4px 10px rgba(94, 99, 255, 0.3);
        }
        .btn-create-user:hover {
            background: linear-gradient(45deg, #5e63ff, #7a7dfa);
            box-shadow: 0 6px 15px rgba(94, 99, 255, 0.4);
            transform: translateY(-2px);
        }
        /* Role specific styles */
        .role-cell {
            display: flex;
            align-items: center;
        }
        .role-cell .save-status {
            margin-left: 10px;
            font-size: 0.8em;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
         .role-cell .save-status.visible {
             opacity: 1;
         }
          .save-success { color: #28a745; } /* Green */
          .save-error { color: #dc3545; } /* Red */

        .search-container {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .search-input {
            padding: 10px 15px;
            border: 1px solid #36364a;
            border-radius: 5px;
            background-color: #1e1e2d;
            color: #e0e0e6;
            flex: 1;
            max-width: 300px;
        }
        .search-input:focus {
            outline: none;
            border-color: #7a7dfa;
        }
        .filter-select {
            padding: 10px 15px;
            border: 1px solid #36364a;
            border-radius: 5px;
            background-color: #1e1e2d;
            color: #e0e0e6;
            min-width: 150px;
        }
        .filter-select:focus {
            outline: none;
            border-color: #7a7dfa;
        }
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }
        .pagination a {
            padding: 8px 15px;
            background-color: #1e1e2d;
            color: #e0e0e6;
            border-radius: 5px;
            text-decoration: none;
            transition: all 0.2s ease;
        }
        .pagination a:hover {
            background-color: #5e63ff;
            color: #fff;
        }
        .pagination .active {
            background-color: #5e63ff;
            color: #fff;
        }
        .pagination .disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
{% endblock %}

{% block admin_content %}
    <h1>User Management</h1>

    <div class="search-container">
        <input type="text" id="userSearch" class="search-input" placeholder="Search users..." value="{{ searchQuery }}">
        <button id="searchButton" class="btn-create-user" style="padding: 10px 20px; margin-bottom: 0;">Search</button>
        <select id="roleFilter" class="filter-select">
            <option value="">All Roles</option>
            <option value="ROLE_ADMIN" {% if roleFilter == 'ROLE_ADMIN' %}selected{% endif %}>Admin</option>
            <option value="ROLE_USER" {% if roleFilter == 'ROLE_USER' %}selected{% endif %}>User</option>
        </select>
        <select id="verifiedFilter" class="filter-select">
            <option value="">All Users</option>
            <option value="1" {% if verifiedFilter == '1' %}selected{% endif %}>Verified</option>
            <option value="0" {% if verifiedFilter == '0' %}selected{% endif %}>Unverified</option>
        </select>
        <a href="{{ path('admin_user_new') }}" class="btn btn-create-user">Create New User</a>
    </div>

    <table class="admin-user-table">
        <thead>
            <tr>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Roles</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="userTableBody">
        {% for user in pagination %}
            <tr data-user-id="{{ user.id }}" data-email="{{ user.mail }}" data-prenom="{{ user.prenom }}" data-nom="{{ user.nom }}" data-role="{{ user.roles|join(',') }}" data-verified="{{ user.isVerified ? '1' : '0' }}">
                <td>{{ user.mail }}</td>
                <td>{{ user.prenom | default('N/A') }}</td>
                <td>{{ user.nom | default('N/A') }}</td>
                <td class="role-cell">
                    <select name="role" class="role-select">
                        <option value="ROLE_ADMIN" {% if 'ROLE_ADMIN' in user.roles %}selected{% endif %}>Admin</option>
                        <option value="ROLE_USER" {% if 'ROLE_ADMIN' not in user.roles %}selected{% endif %}>User</option>
                    </select>
                    <button class="btn-save-role" type="button">Save Role</button>
                    <span class="save-status"></span>
                </td>
                <td class="actions">
                    <a href="{{ path('admin_user_edit', {'id': user.id}) }}">Edit Profile</a>
                    {% if app.user != user %}
                        {{ include('admin/user/_delete_form.html.twig', {'user_id': user.id}) }}
                    {% endif %}
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="5">No users found</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <div class="pagination">
        {{ knp_pagination_render(pagination) }}
    </div>
{% endblock %}

{% block admin_javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Role update functionality
            document.querySelectorAll('.btn-save-role').forEach(button => {
                button.addEventListener('click', async (event) => {
                    const row = event.target.closest('tr');
                    const userId = row.dataset.userId;
                    const selectElement = row.querySelector('.role-select');
                    const selectedRole = selectElement.value;
                    const statusSpan = row.querySelector('.save-status');

                    statusSpan.textContent = 'Saving...';
                    statusSpan.className = 'save-status visible';

                    try {
                        const response = await fetch(`/admin/users/${userId}/update-role`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ roles: [selectedRole] })
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            statusSpan.textContent = 'Saved!';
                            statusSpan.classList.add('save-success');
                            statusSpan.classList.remove('save-error');
                        } else {
                            statusSpan.textContent = `Error: ${result.message || 'Failed to save'}`;
                            statusSpan.classList.add('save-error');
                            statusSpan.classList.remove('save-success');
                        }
                    } catch (error) {
                        console.error('Error updating role:', error);
                        statusSpan.textContent = 'Network Error';
                        statusSpan.classList.add('save-error');
                        statusSpan.classList.remove('save-success');
                    }

                    setTimeout(() => {
                        statusSpan.classList.remove('visible');
                        statusSpan.classList.remove('save-success', 'save-error');
                        statusSpan.textContent = '';
                    }, 3000);
                });
            });

            // Search and filter functionality
            const searchInput = document.getElementById('userSearch');
            const searchButton = document.getElementById('searchButton');
            const roleFilter = document.getElementById('roleFilter');
            const verifiedFilter = document.getElementById('verifiedFilter');

            function updateFilters() {
                const searchQuery = searchInput.value;
                const roleValue = roleFilter.value;
                const verifiedValue = verifiedFilter.value;

                const url = new URL(window.location.href);
                url.searchParams.set('search', searchQuery);
                url.searchParams.set('role', roleValue);
                url.searchParams.set('verified', verifiedValue);
                url.searchParams.set('page', '1'); // Reset to first page when filtering

                window.location.href = url.toString();
            }

            // Trigger search on button click
            searchButton.addEventListener('click', (e) => {
                e.preventDefault();
                updateFilters();
            });

            // Trigger search on Enter key in search input
            searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    updateFilters();
                }
            });

            roleFilter.addEventListener('change', updateFilters);
            verifiedFilter.addEventListener('change', updateFilters);
        });
        document.addEventListener("DOMContentLoaded", () => {
            const sidebar = document.getElementById("admin-sidebar");
            sidebar.classList.add("close");
          });
          
    </script>
{% endblock %} 